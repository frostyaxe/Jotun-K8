from abc import ABC, abstractmethod
from typing import Any

# This is an abstract base class that defines the interface for any model class.
# The concrete model classes are expected to inherit from this base class and implement
# the methods defined here. The purpose is to enforce a consistent structure for all models.

class ModelInterface(ABC):
    """
    Abstract base class to define the interface that all model classes should implement.

    This interface ensures that any model class provides methods to:
    - Get the request model class (typically used for request validation)
    - Process the results returned by the model
    - Get the associated trainer class for training the model

    All concrete model classes must inherit from this class and implement the methods.
    """

    @abstractmethod
    def get_request_model(self) -> Any:
        """
        Abstract method that must be implemented by the child class.

        This method is intended to return the request model class that is used to 
        validate or parse incoming requests (usually a Pydantic model or a similar 
        request schema).

        Returns:
            Any: The request model class (could be a Pydantic model or any custom class).
        """
        pass

    @abstractmethod
    def process_request(self, result: Any) -> Any:
        """
        Abstract method that must be implemented by the child class.

        This method is designed to process the result data generated by the model.
        The result might require additional formatting, calculation, or transformation
        based on the specific needs of the model.

        Args:
            result (Any): The raw result returned from the model (usually a prediction or computation).

        Returns:
            Any: The processed result, which may be in a different format (e.g., a dictionary, JSON, etc.).
        """
        pass

    @abstractmethod
    def get_trainer_class(self) -> Any:
        """
        Abstract method that must be implemented by the child class.

        This method should return the class responsible for training the model.
        The trainer class is responsible for preparing, training, and saving the model.

        Returns:
            Any: The trainer class (could be a custom trainer or a specific ML framework's trainer class).
        """
        pass

    @abstractmethod
    def get_prediction_features(self, request_dict: Any) -> Any:
        """
        Abstract method that prepares the feature list required for making predictions
        with the model. It takes a dictionary of input data (request_dict) and processes it
        into the necessary format (features list) that can be passed to the model's `predict` method.
        
        Args:
            request_dict (Any): Input data in the form of a dictionary or other structure
                                 that contains the necessary information for generating
                                 prediction features.
        
        Returns:
            Any: Processed features in the appropriate format for model prediction.
        """
        pass


    @abstractmethod
    def validate_features(self, model: Any, request_dict: Any) -> Any:
        """
        Abstract method that prepares the feature list required for making predictions
        with the model. It takes a dictionary of input data (request_dict) and processes it
        into the necessary format (features list) that can be passed to the model's `predict` method.
        
        Args:
            request_dict (Any): Input data in the form of a dictionary or other structure
                                 that contains the necessary information for generating
                                 prediction features.
        
        Returns:
            Any: Processed features in the appropriate format for model prediction.
        """
        pass


